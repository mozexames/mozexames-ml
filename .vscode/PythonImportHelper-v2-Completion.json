[
    {
        "label": "ipdb",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "ipdb",
        "description": "ipdb",
        "detail": "ipdb",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "Point",
        "importPath": "models.point",
        "description": "models.point",
        "isExtraImport": true,
        "detail": "models.point",
        "documentation": {}
    },
    {
        "label": "Point",
        "importPath": "models.point",
        "description": "models.point",
        "isExtraImport": true,
        "detail": "models.point",
        "documentation": {}
    },
    {
        "label": "Size",
        "importPath": "models.size",
        "description": "models.size",
        "isExtraImport": true,
        "detail": "models.size",
        "documentation": {}
    },
    {
        "label": "Size",
        "importPath": "models.size",
        "description": "models.size",
        "isExtraImport": true,
        "detail": "models.size",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "ImageDraw",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "pytesseract",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pytesseract",
        "description": "pytesseract",
        "detail": "pytesseract",
        "documentation": {}
    },
    {
        "label": "pdf2image",
        "importPath": "pdf2image",
        "description": "pdf2image",
        "isExtraImport": true,
        "detail": "pdf2image",
        "documentation": {}
    },
    {
        "label": "Root",
        "importPath": "lib.root",
        "description": "lib.root",
        "isExtraImport": true,
        "detail": "lib.root",
        "documentation": {}
    },
    {
        "label": "Rect",
        "importPath": "models.rect",
        "description": "models.rect",
        "isExtraImport": true,
        "detail": "models.rect",
        "documentation": {}
    },
    {
        "label": "Bounds",
        "importPath": "models.bounds",
        "description": "models.bounds",
        "isExtraImport": true,
        "detail": "models.bounds",
        "documentation": {}
    },
    {
        "label": "Root",
        "kind": 6,
        "importPath": "src.lib.root",
        "description": "src.lib.root",
        "peekOfCode": "class Root:\n  @staticmethod\n  def join(*paths: str) -> str:\n    return os.path.join(Root._get_root_path(), *paths)\n  def assets(*paths: str) -> str:\n    return os.path.join(Root._get_root_path(), 'assets/', *paths)\n  def out(*paths: str) -> str:\n    return os.path.join(Root._get_root_path(), 'out/', *paths)\n  @staticmethod\n  def _get_root_path() -> str:",
        "detail": "src.lib.root",
        "documentation": {}
    },
    {
        "label": "Bounds",
        "kind": 6,
        "importPath": "src.models.bounds",
        "description": "src.models.bounds",
        "peekOfCode": "class Bounds:\n  top: int\n  right: int\n  bottom: int\n  left: int",
        "detail": "src.models.bounds",
        "documentation": {}
    },
    {
        "label": "Point",
        "kind": 6,
        "importPath": "src.models.point",
        "description": "src.models.point",
        "peekOfCode": "class Point:\n  x: int\n  y: int",
        "detail": "src.models.point",
        "documentation": {}
    },
    {
        "label": "Rect",
        "kind": 6,
        "importPath": "src.models.rect",
        "description": "src.models.rect",
        "peekOfCode": "class Rect:\n  point: Point\n  size: Size",
        "detail": "src.models.rect",
        "documentation": {}
    },
    {
        "label": "Size",
        "kind": 6,
        "importPath": "src.models.size",
        "description": "src.models.size",
        "peekOfCode": "class Size:\n  width: int\n  height: int",
        "detail": "src.models.size",
        "documentation": {}
    },
    {
        "label": "find_top_limit",
        "kind": 2,
        "importPath": "src.app",
        "description": "src.app",
        "peekOfCode": "def find_top_limit(image_data) -> int:\n  all_words: list[str] = image_data['text']\n  candidates = ['margem', 'enunciado', 'responda']\n  index = index_of_any_of_these_in_list(candidates, all_words)\n  y = image_data['top'][index]\n  height = image_data['height'][index]\n  return y + height\ndef find_nearest_numbered_list_item_bounds(image_data) -> Bounds:\n  all_words: list[str] = image_data['text']\n  index = 1",
        "detail": "src.app",
        "documentation": {}
    },
    {
        "label": "find_nearest_numbered_list_item_bounds",
        "kind": 2,
        "importPath": "src.app",
        "description": "src.app",
        "peekOfCode": "def find_nearest_numbered_list_item_bounds(image_data) -> Bounds:\n  all_words: list[str] = image_data['text']\n  index = 1\n  pass\ndef index_of_any_of_these_in_list(candidates: list[str], items: list[str]):\n  lowered_items = map(lambda i: i.lower(), items)\n  index = -1\n  for candidate in candidates:\n    try:\n      index = list(lowered_items).index(candidate)",
        "detail": "src.app",
        "documentation": {}
    },
    {
        "label": "index_of_any_of_these_in_list",
        "kind": 2,
        "importPath": "src.app",
        "description": "src.app",
        "peekOfCode": "def index_of_any_of_these_in_list(candidates: list[str], items: list[str]):\n  lowered_items = map(lambda i: i.lower(), items)\n  index = -1\n  for candidate in candidates:\n    try:\n      index = list(lowered_items).index(candidate)\n      break\n    except ValueError:\n      # TODO: do something\n      index = -1",
        "detail": "src.app",
        "documentation": {}
    },
    {
        "label": "image_path",
        "kind": 5,
        "importPath": "src.app",
        "description": "src.app",
        "peekOfCode": "image_path = Root.out('42eb49f3-a609-42c0-af01-8f53a3cb7b33-1.jpg')\nwith Image.open(image_path) as image:\n  image_data = pytesseract.image_to_data(image, output_type=pytesseract.Output.DICT, lang='por')\n  # 1. Find the first y limit from top of the page\n  # i = find_nearest_numbered_list_item_index(image_data)\n  # point = Point(image_data['left'][i], image_data['top'][i])\n  # size = Size(image_data['width'][i], image_data['height'][i])\n  # drawing = ImageDraw.Draw(image)\n  # bounds = (point.x, point.y, point.x + size.width, point.y + size.height)\n  # drawing.rectangle(bounds, outline=(0, 255, 0), width=4)",
        "detail": "src.app",
        "documentation": {}
    }
]